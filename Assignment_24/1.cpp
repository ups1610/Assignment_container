// ğŸ’¡ 1. **Roman to Integer**

// Roman numerals are represented by seven different symbols:Â `I`,Â `V`,Â `X`,Â `L`,Â `C`,Â `D`Â andÂ `M`.

// ```
// SymbolValue
// I             1
// V             5
// X             10
// L             50
// C             100
// D             500
// M             1000
// ```

// For example,Â `2`Â is written asÂ `II`Â in Roman numeral, just two ones added together.Â `12`Â is written asÂ `XII`, which is simplyÂ `X + II`. The numberÂ `27`Â is written asÂ `XXVII`, which isÂ `XX + V + II`.

// Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is notÂ `IIII`. Instead, the number four is written asÂ `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written asÂ `IX`. There are six instances where subtraction is used:

// - `I`Â can be placed beforeÂ `V`Â (5) andÂ `X`Â (10) to make 4 and 9.
// - `X`Â can be placed beforeÂ `L`Â (50) andÂ `C`Â (100) to make 40 and 90.
// - `C`Â can be placed beforeÂ `D`Â (500) andÂ `M`Â (1000) to make 400 and 900.

// Given a roman numeral, convert it to an integer.

// **Example 1:**

// ```
// Input: s = "III"
// Output: 3
// Explanation: III = 3.
// ```


#include<bits/stdc++.h>
using namespace std;
int romanToInt(string s) {
         int sum=0;
        
        unordered_map <char,int> r;
        r['I'] = 1;
        r['V'] = 5;
        r['X'] = 10;
        r['L'] = 50;
        r['C'] = 100;
        r['D'] = 500;
        r['M'] = 1000;
        int len=s.size();
        int temp=1000,num=0;
        for(int i=0;i<len;i++)
        {
            num=r[s[i]];
            if(num>temp)
                sum-=2*temp;
            temp=num;
            
            sum+=temp;
           
        }
        return sum;
    }
int main()
{
    string s;
    cout<<"Enter the roman string: \n";
    cin>>s;
    int ans = romanToInt(s);
    cout<<"Output is:\n";
    cout<<ans<<endl;
    return 0;
}    